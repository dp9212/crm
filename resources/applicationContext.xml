<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context.xsd">
	<!-- 不是spring mvc的配置 -->
	<!-- db.properties->DataSoruce->SqlSessionFactory->Mapper->Service->Controller -->
	<context:property-placeholder location="classpath:db.properties" />

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	<!-- SqlSessionFactoryBean通过getObject获取SqlSessionFactory的实例 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 注入连接池 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 配置MyBatis的映射文件 -->
		<!-- private Resource[] mapperLocations; -->
		<property name="mapperLocations" value="classpath*:cn/yysg/crm/mapper/*.xml" />
		<!-- 配置别名的包路径 -->
		<!-- private String typeAliasesPackage; -->
		<property name="typeAliasesPackage" value="cn.yysg.crm.domain,cn.yysg.crm.query" />
	</bean>

	<!--一劳永逸：只需要配置一次，以后全部Mapper都不需要配置了 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- private String basePackage; Mapper接口的包路径 -->
		<property name="basePackage" value="cn.yysg.crm.mapper" />
	</bean>

	<!-- 1.事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 不是注入sqlSessionFactory，而是注入dataSource -->
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 2.aop切入点 -->
	<aop:config>
		<aop:advisor advice-ref="adviceId"
			pointcut="execution(* cn.yysg.crm.service.I*Service.*(..))" />
	</aop:config>
	<!-- 3.事务通知 -->
	<tx:advice id="adviceId" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" propagation="SUPPORTS" />
			<tx:method name="find*" read-only="true" propagation="SUPPORTS" />
			<tx:method name="query*" read-only="true" propagation="SUPPORTS" />
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>
	
	<!-- 系统日志 -->
	
	<bean id="SystemLogUtils" class="cn.yysg.crm.util.SystemLogUtils"/>
	<aop:config>
		<aop:pointcut expression="execution(* cn.yysg.crm.service.I*Service.*(..))" id="systemLog"/>
		<!-- <aop:pointcut expression="execution(* cn.yysg.crm.service.impl.*ServiceImpl.*(..))" id="systemLog"/> -->
		<aop:aspect ref="SystemLogUtils" >
			<aop:after method="writeLog" pointcut-ref="systemLog" />
		</aop:aspect>
	</aop:config>
	
	
	<!-- 注解的组件扫描 -->
	<context:component-scan base-package="cn.yysg.crm" />
	<!-- 开启对spring注解的支持 ，低版本兼容 -->
	<context:annotation-config />

	<!-- 必须引入spring mvc的配置文件 -->
	<import resource="classpath:applicationContext-mvc.xml" />



</beans>